# Создано с помощью https://www.toptal.com/developers/gitignore/api/django,python,pycharm+все
# Отредактируйте на https://www.toptal.com/developers/gitignore?templates=django,python,pycharm+все

### Django ###
*.log
*.pot
*.pyc
__pycache__/
local_settings.py
db.sqlite3
db.sqlite3-journal
media

# Если процесс сборки включает в себя запуск collectstatic, то вам, вероятно, не нужно или не хочется включать статические файлы/
# в ваш репозиторий Git. Обновите и раскомментируйте следующую строку соответствующим образом.
# <имя-проекта-django>/staticfiles/

### Django.Python Stack ###
# Файлы, скомпилированные / оптимизированные / DLL
*.py[cod]
*$py.class

# Расширения C
*.so

# Распространение / упаковка
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
# Обычно эти файлы создаются скриптом Python из шаблона# перед сборкой exe-файла PyInstaller, чтобы добавить в него дату/другую информацию.
*.manifest
*.spec

# Журналы установки
pip-log.txt
pip-delete-this-directory.txt

# Отчёты о модульных тестах / покрытии
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Переводы
*.mo

# Django-stuff:

# Flask-stuff:
instance/
.webassets-cache

# Scrapy-stuff:
.scrapy

# Документация Sphinx
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
# Для библиотеки или пакета вы можете проигнорировать эти файлы, поскольку код
# предназначен для запуска в нескольких средах; в противном случае проверьте их в:
# .python-версия

# pipenv
# Согласно pypa / pipenv #598, рекомендуется включать Pipfile.блокировка в системе управления версиями.
# Однако, в случае совместной работы, при наличии зависимостей от конкретной платформы или dependencies
# не имея кроссплатформенной поддержки, pipenv может устанавливать зависимости, которые не работают, или нет.
# установите все необходимые зависимости.
#Pipfile.блокировка

# поэзия
# Аналогично Pipfile.lock, обычно рекомендуется включать poetry.lock в системе управления версиями.
# Это особенно рекомендуется для двоичных пакетов для обеспечения воспроизводимости и чаще всего игнорируется для библиотек.
#
# https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
# Как и в случае с Pipfile.lock, обычно рекомендуется включать pdm.lock в систему контроля версий.
#pdm.lock
# pdm хранит общесистемные конфигурации в .pdm.toml, но рекомендуется не включать его
# в систему контроля версий.
# https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; используется, например, в github.com/David-OConnor/pyflow и github.com/pdm-project/pdm
__pypackages__/

# Файлы Celery
celerybeat-schedule
celerybeat.pid

# Файлы, проанализированные SageMath
*.sage.py

# Среды
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Настройки проекта Spyder
.spyderproject
.spyproject

# Настройки проекта Rope
.ropeproject

# Документация mkdocs
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Проверка типов Pyre
.pyre/

# Статический анализатор типов pytype
.pytype/

# Отладочные символы Cython
cython_debug/

# PyCharm
# Шаблон JetBrains хранится в отдельном файле JetBrains.gitignore, который можно
# найти по адресу https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
# и добавить в глобальный файл gitignore или объединить с этим файлом. Для более радикального
# варианта (не рекомендуется) вы можете раскомментировать следующее, чтобы игнорировать всю папку idea.
#.idea/

### PyCharm+все ###
# Охватывает IDE JetBrains: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm и Rider
# Ссылка: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# Пользовательские настройки
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# Пользовательские настройки AWS
.idea/**/aws.xml

# Сгенерированные файлы
.idea/**/contentModel.xml

# Конфиденциальные или часто изменяемые файлы
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle и Maven с автоматическим импортом
# При использовании Gradle или Maven с автоматическим импортом следует исключить файлы модулей,
# так как они будут воссоздаваться и могут привести к сбоям. Раскомментируйте, если используете
# автоимпорт.
# .idea/artifacts
# .idea/compiler.xml
# .idea/jarRepositories.xml
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# плагин Mongo Explorer
.idea/**/mongoSettings.xml

# Формат проекта на основе файлов
*.iws

# IntelliJ
out/

# плагин mpeltonen/sbt-idea
.idea_modules/

# Плагин JIRA
atlassian-ide-plugin.xml

# Плагин Cursive Clojure
.idea/replstate.xml

# Плагин SonarLint
.idea/sonarlint/

# Плагин Crashlytics (для Android Studio и IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Клиент REST на основе редактора
.idea/httpRequests

# Файл сериализованного кэша Android Studio 3.1+
.idea/caches/build_file_checksums.ser

### Патч PyCharm+all ###
# Игнорируйте все, кроме настроек стиля кода и конфигураций запуска,
# которые должны быть общими для команд.

.idea/*

!.idea/codeStyles
!.idea/runConfigurations

### Python ###
# Файлы, скомпилированные / оптимизированные / DLL

# Расширения C

# Распространение / упаковка

# PyInstaller
# Обычно эти файлы создаются скриптом Python на основе шаблона
# перед сборкой exe-файла PyInstaller, чтобы добавить в него дату/другую информацию.

# Журналы установки

# Отчёты о модульных тестах / покрытии

# Переводы

# Django:

# Flask:

# Scrapy:

# Документация Sphinx

# PyBuilder

# Jupyter Notebook

# IPython

# pyenv
# Для библиотеки или пакета вы можете игнорировать эти файлы, поскольку код
# предназначено для работы в нескольких средах; в противном случае проверьте их в:
# .python-version

# pipenv
# Согласно pypa/pipenv#598, рекомендуется включать Pipfile.lock в систему контроля версий.
# Однако в случае совместной работы, если есть зависимости для конкретной платформы или зависимости,
# не поддерживающие кроссплатформенность, pipenv может установить зависимости, которые не работают, или не
# установить все необходимые зависимости.

# poetry
# Как и в случае с Pipfile.lock, обычно рекомендуется включать poetry.lock в систему контроля версий.
# Это особенно рекомендуется для двоичных пакетов, чтобы обеспечить воспроизводимость, и чаще
# игнорируется для библиотек.
# https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control

# pdm
# Как и в случае с Pipfile.lock, обычно рекомендуется включать pdm.lock в систему контроля версий.
# pdm хранит общесистемные конфигурации в .pdm.toml, но рекомендуется не включать его
# в систему контроля версий.
# https://pdm.fming.dev/#use-with-ide

# PEP 582; используется, например, в github.com/David-OConnor/pyflow и github.com/pdm-project/pdm

# Вещи для Celery

# Файлы, проанализированные SageMath

# Среды

# Настройки проекта Spyder

# Rope project settings

# mkdocs documentation

# mypy

# Pyre type checker

# pytype static type analyzer

# Cython debug symbols

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.

### Python Patch ###
# Poetry local configuration file - https://python-poetry.org/docs/configuration/#local-configuration
poetry.toml

# ruff
.ruff_cache/

# LSP config files
pyrightconfig.json

# End of https://www.toptal.com/developers/gitignore/api/django,python,pycharm+all